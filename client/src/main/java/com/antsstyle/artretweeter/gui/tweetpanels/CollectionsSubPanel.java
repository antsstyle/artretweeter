/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.antsstyle.artretweeter.gui.tweetpanels;

import com.antsstyle.artretweeter.datastructures.Account;
import com.antsstyle.artretweeter.datastructures.CollectionCurateParamsJSON;
import com.antsstyle.artretweeter.datastructures.CollectionCurateRespJSON;
import com.antsstyle.artretweeter.datastructures.CollectionOperation;
import com.antsstyle.artretweeter.datastructures.CollectionOrdering;
import com.antsstyle.artretweeter.datastructures.OperationResult;
import com.antsstyle.artretweeter.datastructures.TweetHolder;
import com.antsstyle.artretweeter.datastructures.TwitterCollectionHolder;
import com.antsstyle.artretweeter.db.CollectionsDB;
import com.antsstyle.artretweeter.db.CoreDB;
import com.antsstyle.artretweeter.db.DBResponse;
import com.antsstyle.artretweeter.db.DBTable;
import com.antsstyle.artretweeter.db.ResultSetConversion;
import com.antsstyle.artretweeter.gui.GUI;
import com.antsstyle.artretweeter.gui.GUIHelperMethods;
import com.antsstyle.artretweeter.tools.SwingTools;
import com.antsstyle.artretweeter.twitter.RESTAPI;
import java.awt.Desktop;
import java.awt.Font;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author antss
 */
public class CollectionsSubPanel extends javax.swing.JPanel {

    private static final Logger LOGGER = LogManager.getLogger(CollectionsSubPanel.class);

    private final DefaultComboBoxModel selectCollectionBoxModel = new DefaultComboBoxModel();
    private TwitterCollectionHolder currentlySelectedCollection = null;

    /**
     * Creates new form CollectionsPanel
     */
    public CollectionsSubPanel() {
        initComponents();
        List<RowSorter.SortKey> sortKeys = new ArrayList<>();
        sortKeys.add(new RowSorter.SortKey(2, SortOrder.DESCENDING));
        collectionTweetsTable.getRowSorter().setSortKeys(sortKeys);
    }

    public void initialise() {
        collectionTweetsTable.getSelectionModel().addListSelectionListener((ListSelectionEvent event) -> {
            if (event.getValueIsAdjusting()) {
                return;
            }
            int[] rows = collectionTweetsTable.getSelectedRows();
            if (rows.length != 1) {
                return;
            }
            GUIHelperMethods.showTweetPreview(collectionTweetsTable);
        });
        refreshCollectionBoxModel(true);
    }

    public TwitterCollectionHolder getSelectedCollection() {
        return currentlySelectedCollection;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane27 = new javax.swing.JScrollPane();
        collectionTweetsTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        moveTweetUpButton = new javax.swing.JButton();
        moveTweetDownButton = new javax.swing.JButton();
        setTweetOrderButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        createNewCollectionButton = new javax.swing.JButton();
        deleteTweetsFromCollectionButton = new javax.swing.JButton();
        deleteCollectionButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        selectCollectionComboBox = new javax.swing.JComboBox<>();
        viewCollectionOnTwitterButton = new javax.swing.JButton();

        jScrollPane27.setMaximumSize(new java.awt.Dimension(898, 184));
        jScrollPane27.setMinimumSize(new java.awt.Dimension(898, 184));
        jScrollPane27.setPreferredSize(new java.awt.Dimension(898, 184));

        collectionTweetsTable.setAutoCreateRowSorter(true);
        collectionTweetsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Tweet Text", "Order"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        collectionTweetsTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        collectionTweetsTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jScrollPane27.setViewportView(collectionTweetsTable);
        if (collectionTweetsTable.getColumnModel().getColumnCount() > 0) {
            collectionTweetsTable.getColumnModel().getColumn(0).setMinWidth(40);
            collectionTweetsTable.getColumnModel().getColumn(0).setPreferredWidth(40);
            collectionTweetsTable.getColumnModel().getColumn(0).setMaxWidth(40);
            collectionTweetsTable.getColumnModel().getColumn(2).setMinWidth(50);
            collectionTweetsTable.getColumnModel().getColumn(2).setPreferredWidth(50);
            collectionTweetsTable.getColumnModel().getColumn(2).setMaxWidth(50);
        }

        jPanel3.setMaximumSize(new java.awt.Dimension(86, 211));
        jPanel3.setMinimumSize(new java.awt.Dimension(86, 211));

        moveTweetUpButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        moveTweetUpButton.setText("Up");
        moveTweetUpButton.setEnabled(false);
        moveTweetUpButton.setMaximumSize(new java.awt.Dimension(74, 33));
        moveTweetUpButton.setMinimumSize(new java.awt.Dimension(74, 33));
        moveTweetUpButton.setPreferredSize(new java.awt.Dimension(74, 33));
        moveTweetUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveTweetUpButtonActionPerformed(evt);
            }
        });

        moveTweetDownButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        moveTweetDownButton.setText("Down");
        moveTweetDownButton.setToolTipText("");
        moveTweetDownButton.setEnabled(false);
        moveTweetDownButton.setMaximumSize(new java.awt.Dimension(74, 33));
        moveTweetDownButton.setMinimumSize(new java.awt.Dimension(74, 33));
        moveTweetDownButton.setPreferredSize(new java.awt.Dimension(74, 33));
        moveTweetDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveTweetDownButtonActionPerformed(evt);
            }
        });

        setTweetOrderButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        setTweetOrderButton.setText("Set");
        setTweetOrderButton.setEnabled(false);
        setTweetOrderButton.setMaximumSize(new java.awt.Dimension(74, 33));
        setTweetOrderButton.setMinimumSize(new java.awt.Dimension(74, 33));
        setTweetOrderButton.setPreferredSize(new java.awt.Dimension(74, 33));
        setTweetOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setTweetOrderButtonActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("<html>Collection tweet ordering</html>");
        jLabel7.setMaximumSize(new java.awt.Dimension(74, 52));
        jLabel7.setMinimumSize(new java.awt.Dimension(74, 52));
        jLabel7.setPreferredSize(new java.awt.Dimension(74, 52));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(moveTweetDownButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setTweetOrderButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(moveTweetUpButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(moveTweetUpButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(moveTweetDownButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setTweetOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        createNewCollectionButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        createNewCollectionButton.setText("New collection");
        createNewCollectionButton.setMaximumSize(new java.awt.Dimension(134, 33));
        createNewCollectionButton.setMinimumSize(new java.awt.Dimension(134, 33));
        createNewCollectionButton.setPreferredSize(new java.awt.Dimension(134, 33));
        createNewCollectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewCollectionButtonActionPerformed(evt);
            }
        });

        deleteTweetsFromCollectionButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deleteTweetsFromCollectionButton.setText("Delete tweets from collection");
        deleteTweetsFromCollectionButton.setMaximumSize(new java.awt.Dimension(230, 33));
        deleteTweetsFromCollectionButton.setMinimumSize(new java.awt.Dimension(230, 33));
        deleteTweetsFromCollectionButton.setPreferredSize(new java.awt.Dimension(230, 33));
        deleteTweetsFromCollectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTweetsFromCollectionButtonActionPerformed(evt);
            }
        });

        deleteCollectionButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deleteCollectionButton.setText("Delete collection");
        deleteCollectionButton.setMaximumSize(new java.awt.Dimension(142, 33));
        deleteCollectionButton.setMinimumSize(new java.awt.Dimension(142, 33));
        deleteCollectionButton.setPreferredSize(new java.awt.Dimension(142, 33));
        deleteCollectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCollectionButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Select collection: ");

        selectCollectionComboBox.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        selectCollectionComboBox.setModel(selectCollectionBoxModel);
        selectCollectionComboBox.setMaximumSize(new java.awt.Dimension(250, 26));
        selectCollectionComboBox.setMinimumSize(new java.awt.Dimension(250, 26));
        selectCollectionComboBox.setPreferredSize(new java.awt.Dimension(250, 26));
        selectCollectionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectCollectionComboBoxActionPerformed(evt);
            }
        });

        viewCollectionOnTwitterButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        viewCollectionOnTwitterButton.setText("View collection on Twitter");
        viewCollectionOnTwitterButton.setMaximumSize(new java.awt.Dimension(222, 33));
        viewCollectionOnTwitterButton.setMinimumSize(new java.awt.Dimension(222, 33));
        viewCollectionOnTwitterButton.setPreferredSize(new java.awt.Dimension(222, 33));
        viewCollectionOnTwitterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCollectionOnTwitterButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(createNewCollectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteTweetsFromCollectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteCollectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane27, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectCollectionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewCollectionOnTwitterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewCollectionOnTwitterButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectCollectionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane27, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteTweetsFromCollectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(createNewCollectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteCollectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void moveTweetUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveTweetUpButtonActionPerformed
        moveTweetUpButton.setEnabled(false);
        moveTweet(true);
        moveTweetUpButton.setEnabled(true);
    }//GEN-LAST:event_moveTweetUpButtonActionPerformed

    private void moveTweetDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveTweetDownButtonActionPerformed
        moveTweetDownButton.setEnabled(false);
        moveTweet(false);
        moveTweetDownButton.setEnabled(true);
    }//GEN-LAST:event_moveTweetDownButtonActionPerformed

    private void setTweetOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setTweetOrderButtonActionPerformed
        setTweetOrderButton.setEnabled(false);
        setTweetOrder();
        setTweetOrderButton.setEnabled(true);
    }//GEN-LAST:event_setTweetOrderButtonActionPerformed

    private void createNewCollectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewCollectionButtonActionPerformed
        createNewCollectionButton.setEnabled(false);
        createNewCollection();
        createNewCollectionButton.setEnabled(true);
    }//GEN-LAST:event_createNewCollectionButtonActionPerformed

    private void deleteTweetsFromCollectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTweetsFromCollectionButtonActionPerformed
        deleteTweetsFromCollectionButton.setEnabled(false);
        deleteTweetsFromCollection();
        deleteTweetsFromCollectionButton.setEnabled(true);
    }//GEN-LAST:event_deleteTweetsFromCollectionButtonActionPerformed

    private void deleteCollectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCollectionButtonActionPerformed
        deleteCollectionButton.setEnabled(false);
        deleteCollection();
        deleteCollectionButton.setEnabled(true);
    }//GEN-LAST:event_deleteCollectionButtonActionPerformed

    private void selectCollectionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectCollectionComboBoxActionPerformed
        if (selectCollectionComboBox.isEnabled()) {
            TwitterCollectionHolder collection = (TwitterCollectionHolder) selectCollectionComboBox.getSelectedItem();
            if (!collection.equals(currentlySelectedCollection)) {
                currentlySelectedCollection = collection;
                GUI.getMainManagementPanel().getCollectionsSubPanel().refreshCollectionTweetsTable();
            }
        }
    }//GEN-LAST:event_selectCollectionComboBoxActionPerformed

    private void viewCollectionOnTwitterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCollectionOnTwitterButtonActionPerformed
        viewCollectionOnTwitterButton.setEnabled(false);
        viewCollectionOnTwitter();
        viewCollectionOnTwitterButton.setEnabled(true);
    }//GEN-LAST:event_viewCollectionOnTwitterButtonActionPerformed

    private void viewCollectionOnTwitter() {
        if (currentlySelectedCollection.equals(MainTweetsPanel.NO_COLLECTIONS)
                || currentlySelectedCollection.equals(MainTweetsPanel.DB_ERROR_COLLECTION)
                || currentlySelectedCollection.equals(MainTweetsPanel.SELECT_ACCOUNT_FIRST)) {
            return;
        }
        if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
            try {
                Desktop.getDesktop().browse(new URI(currentlySelectedCollection.getCollectionURL()));
            } catch (Exception e) {
                String msg = "An error occurred attempting to direct your browser to the collection URL, check log output.";
                JOptionPane.showMessageDialog(GUI.getInstance(), msg, "Error", JOptionPane.ERROR_MESSAGE);
                LOGGER.error(msg, e);
                LOGGER.error("Collection URL was: " + currentlySelectedCollection.getCollectionURL());
            }
        } else {
            Font font = new Font("Dialog", Font.PLAIN, 12);

            StringBuffer style = new StringBuffer("font-family:" + font.getFamily() + ";");
            style.append("font-weight:").append(font.isBold() ? "bold" : "normal").append(";");
            style.append("font-size:").append(font.getSize()).append("pt;");

            JEditorPane ep = new JEditorPane("text/html", "<html><body style=\"" + style + "\">"
                    + "This action isn't supported on your system. You can copy the link manually to view the collection: "
                    + currentlySelectedCollection.getCollectionURL()
                    + "</body></html>");

            ep.setEditable(false);

            JOptionPane.showMessageDialog(GUI.getInstance(), ep, "View Collection", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    public void addRowToCollectionsTable(Object[] row) {
        DefaultTableModel dtm = (DefaultTableModel) collectionTweetsTable.getModel();
        dtm.addRow(row);
    }

    private void setTweetOrder() {
        int row = collectionTweetsTable.getSelectedRow();
        if (row == -1) {
            return;
        }
        if (collectionTweetsTable.getRowCount() < 2) {
            return;
        }
        int modelRow = collectionTweetsTable.convertRowIndexToModel(row);
        TableModel tm = collectionTweetsTable.getModel();
    }

    private void moveTweet(boolean up) {
        int row = collectionTweetsTable.getSelectedRow();
        if (row == -1) {
            return;
        }
        if (collectionTweetsTable.getRowCount() < 2) {
            return;
        }
        int modelRow = collectionTweetsTable.convertRowIndexToModel(row);
        TableModel tm = collectionTweetsTable.getModel();
        int orderColumnIndex = collectionTweetsTable.getColumnModel().getColumnIndex("Order");
        if (up && modelRow == 0) {
            return;
        }
        if (!up && (modelRow == collectionTweetsTable.getRowCount() - 1)) {
            return;
        }
        Integer otherRowOrderNumber;
        Integer otherRowNumber;
        if (up) {
            otherRowNumber = modelRow - 1;
        } else {
            otherRowNumber = modelRow + 1;
        }
        otherRowOrderNumber = (Integer) tm.getValueAt(otherRowNumber, orderColumnIndex);
        Integer orderNumber = (Integer) tm.getValueAt(modelRow, orderColumnIndex);
        tm.setValueAt(orderNumber, otherRowNumber, orderColumnIndex);
        tm.setValueAt(otherRowOrderNumber, modelRow, orderColumnIndex);

    }

    public boolean checkTweetInCollectionTable(Integer dbIDToCheck) {
        int idColumnIndex = collectionTweetsTable.getColumnModel().getColumnIndex("ID");
        int rowCount = collectionTweetsTable.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            Integer dbID = (Integer) collectionTweetsTable.getModel().getValueAt(i, idColumnIndex);
            if (dbID.equals(dbIDToCheck)) {
                return true;
            }
        }
        return false;
    }

    private void deleteTweetsFromCollection() {
        Account currentlySelectedAccount = GUI.getMainManagementPanel().getSelectedAccount();
        int[] rows = collectionTweetsTable.getSelectedRows();
        if (rows.length == 0) {
            return;
        }
        int[] modelRows = new int[rows.length];
        for (int i = 0; i < rows.length; i++) {
            modelRows[i] = collectionTweetsTable.convertRowIndexToModel(rows[i]);
        }
        Arrays.sort(modelRows);
        int idColumnIndex = collectionTweetsTable.getColumnModel().getColumnIndex("ID");
        HashMap<Long, CollectionOperation> curationParameters = new HashMap<>();
        ArrayList<Object> tweetDBParams = new ArrayList<>();
        ArrayList<Integer> tweetIDs = new ArrayList<>();
        HashMap<Integer, Integer> dbIDModelRowMap = new HashMap<>();
        for (int i = 0; i < modelRows.length; i++) {
            Integer id = (Integer) collectionTweetsTable.getModel().getValueAt(modelRows[i], idColumnIndex);
            tweetDBParams.add(id);
            tweetIDs.add(id);
            dbIDModelRowMap.put(id, modelRows[i]);
        }
        String query = "SELECT * FROM tweets WHERE id IN (?";
        for (int i = 1; i < tweetDBParams.size(); i++) {
            query = query.concat(",?");
        }
        query = query.concat(")");

        DBResponse resp = CoreDB.customQuerySelect(query, tweetDBParams.toArray(new Object[tweetDBParams.size()]));
        if (!resp.wasSuccessful()) {
            String msg = "Failed to retrieve tweet information from DB - check log output.";
            JOptionPane.showMessageDialog(GUI.getInstance(), msg, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (resp.getReturnedRows().isEmpty()) {
            String msg = "Tweet records do not exist in DB - has the database file been modified?";
            JOptionPane.showMessageDialog(GUI.getInstance(), msg, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        ArrayList<HashMap<String, Object>> dbRows = resp.getReturnedRows();
        HashMap<Long, TweetHolder> validTweets = new HashMap<>();
        for (HashMap<String, Object> dbRow : dbRows) {
            TweetHolder tweet = ResultSetConversion.getTweet(dbRow);
            if (tweetIDs.contains(tweet.getId())) {
                curationParameters.put(tweet.getTweetID(), CollectionOperation.REMOVE);
                validTweets.put(tweet.getTweetID(), tweet);
            }
        }
        OperationResult result;
        if (validTweets.size() == 1) {
            ArrayList<Long> keys = new ArrayList<>(validTweets.keySet());
            result = RESTAPI.collectionsEntriesRemove(currentlySelectedCollection.getTwitterID(),
                    keys.get(0), currentlySelectedAccount);
        } else {
            CollectionCurateParamsJSON jsonData = new CollectionCurateParamsJSON()
                    .setId(currentlySelectedCollection.getTwitterID());
            jsonData.setChanges(curationParameters);
            result = RESTAPI.collectionsEntriesCurate(jsonData, currentlySelectedAccount);
        }

        if (!result.wasSuccessful()) {
            if (validTweets.size() == 1) {
                GUIHelperMethods.showErrors(result, LOGGER, "Error removing tweet from collection:");
            } else {
                GUIHelperMethods.showErrors(result, LOGGER, "Error removing tweets from collection:");
            }
            return;
        }
        DefaultTableModel dtm = (DefaultTableModel) collectionTweetsTable.getModel();
        if (validTweets.size() == 1) {
            dtm.removeRow(modelRows[0]);
            ArrayList<Long> keys = new ArrayList<>(validTweets.keySet());
            CoreDB.deleteFromTable(DBTable.COLLECTIONTWEETS,
                    new String[]{"collectionid", "tweetid"},
                    new Object[]{currentlySelectedCollection.getTwitterID(), keys.get(0)});
        } else {
            CollectionCurateRespJSON json = (CollectionCurateRespJSON) result.getTwitterResponse().getReturnedObject();
            CollectionCurateRespJSON.CollectionCurateResponse.CollectionCurateEntry[] entries = json.getResponse().getEntries();
            if (entries == null) {
                entries = new CollectionCurateRespJSON.CollectionCurateResponse.CollectionCurateEntry[0];
            }
            HashMap<Long, String> failedEntries = new HashMap<>();
            for (CollectionCurateRespJSON.CollectionCurateResponse.CollectionCurateEntry entry : entries) {
                failedEntries.put(entry.getEntry().getTweetID(), entry.getEntry().getOp());
            }
            Set<Long> attemptedIDs = validTweets.keySet();
            Set<Long> failedEntryKeys = failedEntries.keySet();
            ArrayList<Integer> modelRowsToRemove = new ArrayList<>();
            ArrayList<Long> tweetIDsToDelete = new ArrayList<>();
            for (Long tweetID : attemptedIDs) {
                if (!failedEntryKeys.contains(tweetID)) {
                    modelRowsToRemove.add(dbIDModelRowMap.get(validTweets.get(tweetID).getId()));
                    tweetIDsToDelete.add(tweetID);
                }
            }
            Collections.sort(modelRowsToRemove);
            for (int i = 0; i < modelRowsToRemove.size(); i++) {
                dtm.removeRow(modelRowsToRemove.get(i) - i);
            }
            String deleteQuery = "DELETE FROM collectiontweets WHERE collectionid=? AND tweetid IN (?";
            Object[] deleteParams = new Object[tweetIDsToDelete.size() + 1];
            deleteParams[0] = currentlySelectedCollection.getTwitterID();
            deleteParams[1] = tweetIDsToDelete.get(0);
            for (int i = 1; i < tweetIDsToDelete.size(); i++) {
                deleteQuery = deleteQuery.concat(",?");
                deleteParams[i + 1] = tweetIDsToDelete.get(i);
            }
            deleteQuery = deleteQuery.concat(")");
            if (!tweetIDsToDelete.isEmpty()) {
                CoreDB.runCustomUpdate(deleteQuery, deleteParams);
            }
            if (!failedEntries.isEmpty()) {
                StringBuilder msg = new StringBuilder("<html>One or more entries were not deleted successfully.<br/><br/>");
                for (Long l : failedEntryKeys) {
                    String reason = failedEntries.get(l);
                    msg = msg.append("Tweet ID ").append(dbIDModelRowMap.get(validTweets.get(l).getId()))
                            .append(" failed with reason: ").append(reason).append("<br/>");
                }
                JOptionPane.showMessageDialog(GUI.getInstance(), msg.toString(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    }

    private void deleteCollection() {
        Account currentlySelectedAccount = GUI.getMainManagementPanel().getSelectedAccount();
        if (currentlySelectedCollection.equals(MainTweetsPanel.NO_COLLECTIONS)
                || currentlySelectedCollection.equals(MainTweetsPanel.DB_ERROR_COLLECTION)) {
            String msg = "Failed to retrieve tweets for this user from DB!";
            JOptionPane.showMessageDialog(GUI.getInstance(), msg, "Error", JOptionPane.ERROR_MESSAGE);
            LOGGER.error(msg);
            return;
        }
        String msg = "<html>Deleting a collection cannot be undone. Are you sure?</html>";
        Integer result = JOptionPane.showConfirmDialog(GUI.getInstance(), msg, "Delete Collection", JOptionPane.OK_CANCEL_OPTION);

        if (result == JOptionPane.OK_OPTION) {
            OperationResult opResult = RESTAPI.collectionsDestroy(currentlySelectedCollection.getTwitterID(), currentlySelectedAccount);
            if (opResult.wasSuccessful()) {
                CoreDB.deleteFromTable(DBTable.COLLECTIONS,
                        new String[]{"id"},
                        new Object[]{currentlySelectedCollection.getDatabaseID()});
                refreshCollectionBoxModel(false);
                DefaultTableModel dtm = (DefaultTableModel) collectionTweetsTable.getModel();
                dtm.setRowCount(0);
            } else {
                GUIHelperMethods.showErrors(opResult, LOGGER, "Error deleting collection:");
            }
        }
    }

    public void refreshCollectionBoxModel(boolean initialRefresh) {
        Account currentlySelectedAccount = GUI.getMainManagementPanel().getSelectedAccount();
        selectCollectionComboBox.setEnabled(false);
        boolean noElementsBefore = noCollectionsInBoxModel();
        selectCollectionBoxModel.removeAllElements();
        if (currentlySelectedAccount.equals(MainTweetsPanel.NO_ACCOUNTS)) {
            selectCollectionBoxModel.addElement(MainTweetsPanel.SELECT_ACCOUNT_FIRST);
            currentlySelectedCollection = MainTweetsPanel.SELECT_ACCOUNT_FIRST;
            selectCollectionBoxModel.setSelectedItem(selectCollectionBoxModel.getElementAt(0));
            selectCollectionComboBox.setEnabled(true);
            return;
        }

        DBResponse resp = CoreDB.selectFromTable(DBTable.COLLECTIONS,
                new String[]{"usertwitterid"},
                new Object[]{currentlySelectedAccount.getTwitterID()});
        if (!resp.wasSuccessful()) {
            LOGGER.error("Failed to get accounts data to refresh combo box model!");
            selectCollectionBoxModel.addElement(MainTweetsPanel.DB_ERROR_COLLECTION);
            currentlySelectedCollection = MainTweetsPanel.DB_ERROR_COLLECTION;
            selectCollectionBoxModel.setSelectedItem(selectCollectionBoxModel.getElementAt(0));
            return;
        }
        ArrayList<HashMap<String, Object>> rows = resp.getReturnedRows();
        for (HashMap<String, Object> row : rows) {
            TwitterCollectionHolder holder = ResultSetConversion.getTwitterCollection(row);
            selectCollectionBoxModel.addElement(holder);
        }
        if (selectCollectionBoxModel.getSize() != 0) {
            selectCollectionBoxModel.setSelectedItem(selectCollectionBoxModel.getElementAt(0));
            currentlySelectedCollection = (TwitterCollectionHolder) selectCollectionBoxModel.getElementAt(0);
            if (initialRefresh || noElementsBefore) {
                GUI.getMainManagementPanel().getCollectionsSubPanel().refreshCollectionTweetsTable();
            }
        } else {
            selectCollectionBoxModel.addElement(MainTweetsPanel.NO_COLLECTIONS);
            currentlySelectedCollection = MainTweetsPanel.NO_COLLECTIONS;
        }
        selectCollectionComboBox.setEnabled(true);
    }

    private boolean noCollectionsInBoxModel() {
        if (selectCollectionBoxModel.getSize() == 0) {
            return true;
        } else if (selectCollectionBoxModel.getSize() == 1) {
            TwitterCollectionHolder holder = (TwitterCollectionHolder) selectCollectionBoxModel.getSelectedItem();
            return (holder.equals(MainTweetsPanel.NO_COLLECTIONS) || holder.equals(MainTweetsPanel.DB_ERROR_COLLECTION)
                    || holder.equals(MainTweetsPanel.SELECT_ACCOUNT_FIRST));
        }
        return false;
    }

    private void createNewCollection() {
        Account currentlySelectedAccount = GUI.getMainManagementPanel().getSelectedAccount();
        if (currentlySelectedAccount.equals(MainTweetsPanel.NO_ACCOUNTS)) {
            String msg = "<html>You cannot add a collection until you have added an account on the Accounts panel.</html>";
            JOptionPane.showMessageDialog(GUI.getInstance(), msg, "Error", JOptionPane.ERROR_MESSAGE);
            LOGGER.error(msg);
            return;
        }
        if (currentlySelectedAccount.equals(MainTweetsPanel.DB_ERROR_ACCOUNT)) {
            String msg = "<html>You cannot add a collection right now due to a database error.</html>";
            JOptionPane.showMessageDialog(GUI.getInstance(), msg, "Error", JOptionPane.ERROR_MESSAGE);
            LOGGER.error(msg);
            return;
        }

        String message = "Please enter a name for your new collection, and (optionally) a description.";
        String[] inputNames = new String[]{"Name: ", "Description: ", "Ordering: "};
        JComboBox box = new JComboBox();
        box.addItem(CollectionOrdering.CURATION_REVERSE_CHRON);
        box.addItem(CollectionOrdering.TWEET_CHRON);
        box.addItem(CollectionOrdering.TWEET_REVERSE_CHRON);
        JComponent[] components = new JComponent[]{new JTextField(), new JTextField(), box};
        ArrayList<Object> results = SwingTools.askForUserInput("Create a new Twitter collection", message,
                inputNames, components);
        if (results == null) {
            return;
        }

        String name = (String) results.get(0);
        String description = (String) results.get(1);
        CollectionOrdering ordering = (CollectionOrdering) results.get(2);
        if (description.trim().equals("")) {
            description = null;
        }
        if (name.trim().equals("")) {
            String msg = "Collection name cannot be empty.";
            JOptionPane.showMessageDialog(GUI.getInstance(), msg, "Error", JOptionPane.ERROR_MESSAGE);
            LOGGER.error(msg);
            return;
        }
        OperationResult res = RESTAPI.collectionsCreate(name, description, ordering, currentlySelectedAccount);
        if (res.wasSuccessful()) {
            TwitterCollectionHolder holder = (TwitterCollectionHolder) res.getTwitterResponse().getReturnedObject();
            Object[] params = new Object[]{currentlySelectedAccount.getTwitterID(), holder.getTwitterID(),
                holder.getCollectionURL(), holder.getName(), holder.getDescription(), holder.getOrdering().getParameterName()};
            CollectionsDB.insertCollection(params);
            String msg = "Collection added successfully!";
            JOptionPane.showMessageDialog(GUI.getInstance(), msg, "Success", JOptionPane.INFORMATION_MESSAGE);
            refreshCollectionBoxModel(false);
        } else {
            GUIHelperMethods.showErrors(res, LOGGER, "Error creating collection:");
        }

    }

    public void refreshCollectionTweetsTable() {
        Account currentlySelectedAccount = GUI.getMainManagementPanel().getSelectedAccount();
        if (currentlySelectedAccount.equals(MainTweetsPanel.NO_ACCOUNTS) || currentlySelectedCollection.equals(MainTweetsPanel.NO_COLLECTIONS)
                || currentlySelectedAccount.equals(MainTweetsPanel.DB_ERROR_ACCOUNT)
                || currentlySelectedCollection.equals(MainTweetsPanel.DB_ERROR_COLLECTION)) {
            return;
        }

        String query = "SELECT * FROM tweets WHERE tweetid IN (SELECT tweetid FROM collectiontweets WHERE collectionid=?)";
        DBResponse resp = CoreDB.customQuerySelect(query, currentlySelectedCollection.getTwitterID());
        if (!resp.wasSuccessful()) {
            String msg = "Failed to retrieve tweets for this collection from DB!";
            JOptionPane.showMessageDialog(GUI.getInstance(), msg, "Error", JOptionPane.ERROR_MESSAGE);
            LOGGER.error(msg);
            return;
        }
        DefaultTableModel dtm = (DefaultTableModel) collectionTweetsTable.getModel();
        dtm.setRowCount(0);
        ArrayList<HashMap<String, Object>> rows = resp.getReturnedRows();
        for (HashMap<String, Object> row : rows) {
            TweetHolder tweet = ResultSetConversion.getTweet(row);
            dtm.addRow(new Object[]{tweet.getId(), tweet.getFullTweetText()});
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JTable collectionTweetsTable;
    private javax.swing.JButton createNewCollectionButton;
    private javax.swing.JButton deleteCollectionButton;
    private javax.swing.JButton deleteTweetsFromCollectionButton;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane27;
    private javax.swing.JButton moveTweetDownButton;
    private javax.swing.JButton moveTweetUpButton;
    private javax.swing.JComboBox<String> selectCollectionComboBox;
    private javax.swing.JButton setTweetOrderButton;
    private javax.swing.JButton viewCollectionOnTwitterButton;
    // End of variables declaration//GEN-END:variables
}
