/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.antsstyle.artretweeter.gui.tweetpanels;

import com.antsstyle.artretweeter.datastructures.AutomationSettingsHolder;
import com.antsstyle.artretweeter.gui.GUI;
import com.antsstyle.artretweeter.gui.GUIHelperMethods;
import java.awt.event.ItemEvent;
import javax.swing.JOptionPane;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author antss
 */
public class AutomationMetricsEnabledSubPanel extends javax.swing.JPanel {
    
    private static final Logger LOGGER = LogManager.getLogger(AutomationMetricsEnabledSubPanel.class);

    /**
     * Creates new form AutomationSubPanel
     */
    public AutomationMetricsEnabledSubPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        metricMeasurementTypeComboBox = new javax.swing.JComboBox<>();
        retweetPercentTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        showExplanationButton = new javax.swing.JButton();
        hideMetricsOptionsButton = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(1046, 38));
        setMinimumSize(new java.awt.Dimension(1046, 38));

        metricMeasurementTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Adaptive", "Mean Average" }));
        metricMeasurementTypeComboBox.setMaximumSize(new java.awt.Dimension(122, 32));
        metricMeasurementTypeComboBox.setMinimumSize(new java.awt.Dimension(122, 32));
        metricMeasurementTypeComboBox.setPreferredSize(new java.awt.Dimension(122, 32));
        metricMeasurementTypeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                metricMeasurementTypeComboBoxItemStateChanged(evt);
            }
        });

        retweetPercentTextField.setEnabled(false);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("  Exclude tweets in the bottom % of your tweet engagement (20-75%):");
        jLabel3.setMaximumSize(new java.awt.Dimension(450, 32));
        jLabel3.setMinimumSize(new java.awt.Dimension(450, 32));
        jLabel3.setPreferredSize(new java.awt.Dimension(450, 32));

        showExplanationButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        showExplanationButton.setText("Show explanation");
        showExplanationButton.setMaximumSize(new java.awt.Dimension(175, 32));
        showExplanationButton.setMinimumSize(new java.awt.Dimension(175, 32));
        showExplanationButton.setPreferredSize(new java.awt.Dimension(175, 32));
        showExplanationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showExplanationButtonActionPerformed(evt);
            }
        });

        hideMetricsOptionsButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        hideMetricsOptionsButton.setText("Hide metrics options");
        hideMetricsOptionsButton.setMaximumSize(new java.awt.Dimension(175, 32));
        hideMetricsOptionsButton.setMinimumSize(new java.awt.Dimension(175, 32));
        hideMetricsOptionsButton.setPreferredSize(new java.awt.Dimension(175, 32));
        hideMetricsOptionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideMetricsOptionsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(retweetPercentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(metricMeasurementTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showExplanationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hideMetricsOptionsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 3, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(showExplanationButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(hideMetricsOptionsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(retweetPercentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(metricMeasurementTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void showExplanationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showExplanationButtonActionPerformed
        showExplanationButton.setEnabled(false);
        showAveragesExplanation();
        showExplanationButton.setEnabled(true);
    }//GEN-LAST:event_showExplanationButtonActionPerformed

    private void hideMetricsOptionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideMetricsOptionsButtonActionPerformed
        GUI.getAutomationPanel().setMetricsOptionsPanel(true);
    }//GEN-LAST:event_hideMetricsOptionsButtonActionPerformed

    private void metricMeasurementTypeComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_metricMeasurementTypeComboBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            setMetricMeasurementTypeFields();
        }
    }//GEN-LAST:event_metricMeasurementTypeComboBoxItemStateChanged

    public void initialise(AutomationSettingsHolder holder) {
        if (holder != null) {
            String metric = holder.getMetricsMeasurementType();
            metricMeasurementTypeComboBox.setSelectedItem(metric);
            if (!metric.equals("Adaptive")) {
                Integer retweetPercent = holder.getRetweetPercent();
                retweetPercentTextField.setText(String.valueOf(retweetPercent));
            }
        }
        setMetricMeasurementTypeFields();
    }

    public void setMetricMeasurementTypeFields() {
        String item = (String) metricMeasurementTypeComboBox.getSelectedItem();
        retweetPercentTextField.setEnabled(!item.equals("Adaptive"));
    }

    private void showAveragesExplanation() {
        String message = "To prevent non-art tweets from being retweeted, ArtRetweeter will exclude all tweets"
                + " that have less retweets than a given value. There are two ways you can choose the average to be calculated;"
                + " the default is to use the Adaptive setting."
                + "<br/><br/>"
                + "<b>Mean Average:</b> Uses mean average of retweet count. This is often skewed high, due to a small number of viral tweets;"
                + " as a result, you must enter a percentage. Tweets with less than (mean average x percentage) retweets will be excluded."
                + "<br/><br/>"
                + "For example, if the mean average is 500 and you enter 20%, tweets with less than 100 retweets will not be considered for retweeting."
                + "<br/><br/>"
                + "<b>Adaptive:</b> ArtRetweeter will automatically calculate which tweets to exclude. "
                + "It does this by analysing the retweet count of your image tweets and applying some maths to them. "
                + "Note that this is a work in progress; it is not perfect.";
        message = String.format(GUIHelperMethods.wordWrapLabelHTML, 500, message);
        JOptionPane.showMessageDialog(GUI.getInstance(), message, "Averages Explanation", JOptionPane.INFORMATION_MESSAGE);
    }

    public void setRetweetPercentField(String retweetPercent) {
        retweetPercentTextField.setText(retweetPercent);
    }

    public String getRetweetPercentFieldText() {
        return retweetPercentTextField.getText().trim();
    }

    public void setMetricMeasurementTypeComboBox(String item) {
        metricMeasurementTypeComboBox.setSelectedItem(item);
    }

    public String getMetricMeasurementTypeComboBoxItem() {
        return (String) metricMeasurementTypeComboBox.getSelectedItem();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton hideMetricsOptionsButton;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JComboBox<String> metricMeasurementTypeComboBox;
    private javax.swing.JTextField retweetPercentTextField;
    private javax.swing.JButton showExplanationButton;
    // End of variables declaration//GEN-END:variables
}
