/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.antsstyle.artretweeter.gui.tweetpanels;

import com.antsstyle.artretweeter.datastructures.Account;
import com.antsstyle.artretweeter.datastructures.OperationResult;
import com.antsstyle.artretweeter.datastructures.TableTimestamp;
import com.antsstyle.artretweeter.datastructures.TweetHolder;
import com.antsstyle.artretweeter.db.CoreDB;
import com.antsstyle.artretweeter.db.DBResponse;
import com.antsstyle.artretweeter.db.DBTable;
import com.antsstyle.artretweeter.db.ResultSetConversion;
import com.antsstyle.artretweeter.db.TweetsDB;
import com.antsstyle.artretweeter.gui.GUI;
import com.antsstyle.artretweeter.gui.GUIHelperMethods;
import com.antsstyle.artretweeter.serverapi.ServerAPI;
import com.antsstyle.artretweeter.tools.FormatTools;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author antss
 */
public class QueueSubPanel extends javax.swing.JPanel {

    private static final Logger LOGGER = LogManager.getLogger(QueueSubPanel.class);

    private final ListSelectionListener listener = new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (e.getValueIsAdjusting()) {
                return;
            }
            int row = queuedTweetsTable.getSelectedRow();
            if (row == -1) {
                return;
            }
            GUIHelperMethods.showTweetPreview(queuedTweetsTable);
        }
    };

    /**
     * Creates new form QueueSubPanel
     */
    public QueueSubPanel() {
        initComponents();
        List<RowSorter.SortKey> sortKeys = new ArrayList<>();
        sortKeys.add(new RowSorter.SortKey(2, SortOrder.ASCENDING));
        queuedTweetsTable.getRowSorter().setSortKeys(sortKeys);
    }

    public JTable getQueuedTweetsTable() {
        return queuedTweetsTable;
    }

    public void disableTableListener() {
        queuedTweetsTable.getSelectionModel().removeListSelectionListener(listener);
    }

    public void enableTableListener() {
        queuedTweetsTable.getSelectionModel().addListSelectionListener(listener);
    }

    public void initialise() {
        queuedTweetsTable.getSelectionModel().addListSelectionListener(listener);
        refreshQueueTable();
    }

    public void refreshQueueTable() {
        Account currentlySelectedAccount = GUI.getMainManagementPanel().getSelectedAccount();
        if (currentlySelectedAccount.equals(MainTweetsPanel.NO_ACCOUNTS)
                || currentlySelectedAccount.equals(MainTweetsPanel.DB_ERROR_ACCOUNT)) {
            return;
        }

        String query = "SELECT retweetqueue.retweettime,retweetqueue.automated,"
                + "(SELECT id FROM tweets WHERE tweets.tweetid=retweetqueue.tweetid) AS tweetdatabaseid,"
                + "(SELECT fulltweettext FROM tweets WHERE tweets.tweetid=retweetqueue.tweetid) AS text "
                + "FROM retweetqueue WHERE retweetingusertwitterid=? ORDER BY retweettime ASC";

        DBResponse resp = CoreDB.customQuerySelect(query, currentlySelectedAccount.getTwitterID());
        if (!resp.wasSuccessful()) {
            LOGGER.error("Failed to query database for retweet queue information!");
            return;
        }
        DefaultTableModel dtm = (DefaultTableModel) queuedTweetsTable.getModel();
        dtm.setRowCount(0);
        ArrayList<HashMap<String, Object>> rows = resp.getReturnedRows();
        for (HashMap<String, Object> row : rows) {
            Integer id = (Integer) row.get("TWEETDATABASEID");
            String tweetText = (String) row.get("TEXT");
            Timestamp retweetTime = (Timestamp) row.get("RETWEETTIME");
            Boolean automated = ((String) row.get("AUTOMATED")).equals("Y");
            TableTimestamp tableTimestamp = new TableTimestamp(retweetTime);
            dtm.addRow(new Object[]{id, tweetText, tableTimestamp, automated});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane29 = new javax.swing.JScrollPane();
        queuedTweetsTable = new javax.swing.JTable();
        changeRetweetTimeButton = new javax.swing.JButton();
        unqueueRetweetButton = new javax.swing.JButton();

        jScrollPane29.setMaximumSize(new java.awt.Dimension(898, 184));
        jScrollPane29.setMinimumSize(new java.awt.Dimension(898, 184));
        jScrollPane29.setPreferredSize(new java.awt.Dimension(898, 184));

        queuedTweetsTable.setAutoCreateRowSorter(true);
        queuedTweetsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Tweet Text", "Retweet Time", "Automated"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        queuedTweetsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane29.setViewportView(queuedTweetsTable);
        if (queuedTweetsTable.getColumnModel().getColumnCount() > 0) {
            queuedTweetsTable.getColumnModel().getColumn(0).setMinWidth(40);
            queuedTweetsTable.getColumnModel().getColumn(0).setPreferredWidth(40);
            queuedTweetsTable.getColumnModel().getColumn(0).setMaxWidth(40);
            queuedTweetsTable.getColumnModel().getColumn(2).setMinWidth(125);
            queuedTweetsTable.getColumnModel().getColumn(2).setPreferredWidth(125);
            queuedTweetsTable.getColumnModel().getColumn(2).setMaxWidth(125);
            queuedTweetsTable.getColumnModel().getColumn(3).setMinWidth(70);
            queuedTweetsTable.getColumnModel().getColumn(3).setPreferredWidth(70);
            queuedTweetsTable.getColumnModel().getColumn(3).setMaxWidth(70);
        }

        changeRetweetTimeButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        changeRetweetTimeButton.setText("Change retweet time");
        changeRetweetTimeButton.setMaximumSize(new java.awt.Dimension(176, 33));
        changeRetweetTimeButton.setMinimumSize(new java.awt.Dimension(176, 33));
        changeRetweetTimeButton.setPreferredSize(new java.awt.Dimension(176, 33));
        changeRetweetTimeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeRetweetTimeButtonActionPerformed(evt);
            }
        });

        unqueueRetweetButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        unqueueRetweetButton.setText("Unqueue retweet");
        unqueueRetweetButton.setMaximumSize(new java.awt.Dimension(151, 33));
        unqueueRetweetButton.setMinimumSize(new java.awt.Dimension(151, 33));
        unqueueRetweetButton.setPreferredSize(new java.awt.Dimension(151, 33));
        unqueueRetweetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unqueueRetweetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane29, javax.swing.GroupLayout.PREFERRED_SIZE, 598, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(unqueueRetweetButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(changeRetweetTimeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane29, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(unqueueRetweetButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(changeRetweetTimeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void changeRetweetTimeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeRetweetTimeButtonActionPerformed
        changeRetweetTimeButton.setEnabled(false);
        changeRetweetTime();
        changeRetweetTimeButton.setEnabled(true);
    }//GEN-LAST:event_changeRetweetTimeButtonActionPerformed

    private void unqueueRetweetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unqueueRetweetButtonActionPerformed
        unqueueRetweetButton.setEnabled(false);
        unqueueRetweet();
        unqueueRetweetButton.setEnabled(true);
    }//GEN-LAST:event_unqueueRetweetButtonActionPerformed

    private void changeRetweetTime() {
        Account currentlySelectedAccount = GUI.getMainManagementPanel().getSelectedAccount();
        int[] selectedRowsCheck = queuedTweetsTable.getSelectedRows();
        if (selectedRowsCheck.length > 1) {
            String msg = "Select only one tweet at a time to queue.";
            JOptionPane.showMessageDialog(GUI.getInstance(), msg, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int row = queuedTweetsTable.getSelectedRow();
        if (row == -1) {
            return;
        }
        int modelRow = queuedTweetsTable.convertRowIndexToModel(row);
        int idColumnIndex = queuedTweetsTable.getColumnModel().getColumnIndex("ID");
        Integer id = (Integer) queuedTweetsTable.getModel().getValueAt(modelRow, idColumnIndex);
        TweetHolder tweet = ServerAPI.checkTweetCanBeQueued(currentlySelectedAccount, true, id);
        if (tweet == null) {
            return;
        }
        Timestamp time = ServerAPI.getTimeFromUser();
        if (time == null) {
            return;
        }
        OperationResult opResult = ServerAPI.queueRetweet(currentlySelectedAccount, tweet, time);
        if (opResult.wasSuccessful()) {
            TableTimestamp tableTimestamp = new TableTimestamp(time);
            if (!TweetsDB.insertRetweetQueueEntry(new Object[]{tweet.getTweetID(), currentlySelectedAccount.getTwitterID(), time, "N"})) {
                String msg = "<html>Time changed successfully, but an error occurred updating this queue entry "
                        + "<br/>in the ArtRetweeter client.</html>";
                JOptionPane.showMessageDialog(GUI.getInstance(), msg, "Error", JOptionPane.ERROR_MESSAGE);
                LOGGER.error(msg);
                return;
            }
            int rowCount = queuedTweetsTable.getRowCount();
            Integer queueTableIDColumnIndex = queuedTweetsTable.getColumnModel().getColumnIndex("ID");
            Integer queueTableRTTimeColumnIndex = queuedTweetsTable.getColumnModel().getColumnIndex("Retweet Time");
            for (int i = 0; i < rowCount; i++) {
                Integer tableID = (Integer) queuedTweetsTable.getModel().getValueAt(i, queueTableIDColumnIndex);
                if (tableID.equals(tweet.getId())) {
                    queuedTweetsTable.getModel().setValueAt(tableTimestamp, i, queueTableRTTimeColumnIndex);
                    break;
                }
            }
        } else {
            GUIHelperMethods.showErrors(opResult, LOGGER, "Error changing retweet time:");
        }
    }

    private void unqueueRetweet() {
        Account currentlySelectedAccount = GUI.getMainManagementPanel().getSelectedAccount();
        int row = queuedTweetsTable.getSelectedRow();
        if (row == -1) {
            return;
        }
        int modelRow = queuedTweetsTable.convertRowIndexToModel(row);
        int idColumnIndex = queuedTweetsTable.getColumnModel().getColumnIndex("ID");
        Integer id = (Integer) queuedTweetsTable.getModel().getValueAt(modelRow, idColumnIndex);
        DBResponse selectResp = CoreDB.selectFromTable(DBTable.TWEETS,
                new String[]{"id"},
                new Object[]{id});
        if (!selectResp.wasSuccessful()) {
            String msg = "Failed to retrieve tweet information from DB!";
            JOptionPane.showMessageDialog(GUI.getInstance(), msg, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (selectResp.getReturnedRows().isEmpty()) {
            String msg = "Tweet could not be found in DB - has the database folder been modified?";
            JOptionPane.showMessageDialog(GUI.getInstance(), msg, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        TweetHolder tweet = ResultSetConversion.getTweet(selectResp.getReturnedRows().get(0));
        OperationResult result = ServerAPI.unqueueRetweet(currentlySelectedAccount, tweet.getTweetID());
        if (!result.wasSuccessful()) {
            GUIHelperMethods.showErrors(result, LOGGER, "Error unqueuing retweet:");
            return;
        }
        DBResponse deleteResp = CoreDB.deleteFromTable(DBTable.RETWEETQUEUE,
                new String[]{"tweetid"},
                new Object[]{tweet.getTweetID()});
        if (deleteResp.wasSuccessful()) {
            DefaultTableModel dtm = (DefaultTableModel) queuedTweetsTable.getModel();
            dtm.removeRow(modelRow);
        } else {
            String msg = "Failed to delete entry from queue - check log output.";
            JOptionPane.showMessageDialog(GUI.getInstance(), msg, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton changeRetweetTimeButton;
    private javax.swing.JScrollPane jScrollPane29;
    protected static javax.swing.JTable queuedTweetsTable;
    private javax.swing.JButton unqueueRetweetButton;
    // End of variables declaration//GEN-END:variables
}
